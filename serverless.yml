service: dala-wallet-api
package: 
  exclude:
    - env/**
    - microraiden/**
    - dala_proxy.db*
    - private-key
    - secret.js
    - truffle.js

provider:
  name: aws
  stage: ${opt:stage, self:custom.defaultStage}
  profile: ${opt:profile}
  region: eu-west-1
  runtime: nodejs6.10
  vpc:
    securityGroupIds: 
      - Fn::ImportValue: dala-infrastructure-DalaInstanceSecurityGroupId
    subnetIds:
      - Fn::ImportValue: dala-infrastructure-PrivateSubnetAId
      - Fn::ImportValue: dala-infrastructure-PrivateSubnetBId
      - Fn::ImportValue: dala-infrastructure-PrivateSubnetCId
  environment:
    FINERACT_API_ENDPOINT_BASE: ${ssm:/${self:service}/${self:provider.stage}/FINERACT_API_ENDPOINT_BASE}
    DEPOSIT_TOPIC: ${self:resources.Outputs.DalaWalletDepositSNSTopicArn.Value}
    WALLET_STATUS_TOPIC: ${self:resources.Outputs.DalaWalletStatusSNSTopicArn.Value}
    TRANSFER_TOPIC: ${self:resources.Outputs.DalaWalletTransferSNSTopicArn.Value}
    WITHDRAWAL_TOPIC: ${self:resources.Outputs.DalaWalletWithdrawalSNSTopicArn.Value}
    DEFAULT_GAS: ${self:custom.profiles.${self:provider.stage}.DEFAULT_GAS}
    ON_TOKEN_TRANSFER_STATE_MACHINE: ${self:resources.Outputs.OnTokenTransferStateMachineArn.Value}
    ON_CREATE_SUBSCRIBER_STATE_MACHINE: ${self:resources.Outputs.OnCreateSubscriberStateMachineArn.Value}
    ON_CREATE_WALLET_STATE_MACHINE: ${self:resources.Outputs.OnCreateWalletStateMachineArn.Value}
    ON_USER_CONFIRMED_STATE_MACHINE: ${self:resources.Outputs.OnUserConfirmedStateMachineArn.Value}
  environmentSecrets:
    PRIVATE_KEY: '/${self:service}/${self:provider.stage}/PRIVATE_KEY'
    RPC_SERVER: '/${self:service}/${self:provider.stage}/RPC_SERVER'
    FROM_ADDRESS: '/${self:service}/${self:provider.stage}/FROM_ADDRESS'
  iamRoleStatements:
    - Effect: Allow
      Action:
        - states:StartExecution
      Resource:
        - ${self:resources.Outputs.OnTokenTransferStateMachineArn.Value}
        - ${self:resources.Outputs.OnCreateSubscriberStateMachineArn.Value}
        - ${self:resources.Outputs.OnCreateWalletStateMachineArn.Value}
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource:
        - ${self:resources.Outputs.DalaWalletEventsDynamoDbTableArn.Value}
    - Effect: Allow
      Action:
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminInitiateAuth
        - cognito-idp:AdminRespondToAuthChallenge
        - cognito-idp:AdminGetUser
        - cognito-idp:AdminResetUserPassword
      Resource:
        - ${self:resources.Outputs.CognitoUserPoolDalaWalletUserPoolArn.Value}
    - Effect: Allow
      Action:
        - SNS:Publish
        - SNS:Subscribe
      Resource:
        - ${self:resources.Outputs.DalaWalletDepositSNSTopicArn.Value}
        - ${self:resources.Outputs.DalaWalletStatusSNSTopicArn.Value}
        - ${self:resources.Outputs.DalaWalletTransferSNSTopicArn.Value}
        - ${self:resources.Outputs.DalaWalletWithdrawalSNSTopicArn.Value}
  apiKeys:
    - ${self:service}-${self:provider.stage}

functions:
  #cognito hooks
  onUserConfirmed:
    handler: src/users/triggers.onUserConfirmed
    package:
      include:
        - src/users/**
        - src/common/**
        - src/model/**
    # events:
    #   - cognitoUserPool:
    #       pool: DalaWalletUserPool
    #       trigger: PostConfirmation
  #dynamodb stream listeners
  onDalaTokenEvent:
    handler: src/token/listeners.onDalaTokenEvent
    package:
      include: 
        - src/token/**
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - DalaTokenEventsDynamoDbTable
              - StreamArn
  onDalaWalletEvent:
    handler: src/common/listeners.onDalaWalletEvent
    package: 
      include:
        - src/common/**
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - DalaWalletEventsDynamoDbTable
              - StreamArn
  #notification steps
  onSuccessfulCreateWallet:
    handler: src/notifications/steps.onSuccessfulCreateWallet
    package:
      include:
        - src/notifications/**
        - src/common/**
        - src/model/**
  onFailedCreateWallet:
    handler: src/notifications/steps.onFailedCreateWallet
    package:
      include:
        - src/notifications/**
        - src/common/**
        - src/model/**
  onSuccessfulTransfer:
    handler: src/notifications/steps.onSuccessfulTransfer
    package:
      include:
        - src/notifications/**
        - src/common/**
        - src/model/**
  onFailedTransfer:
    handler: src/notifications/steps.onFailedTransfer
    package:
      include:
        - src/notifications/**
        - src/common/**
        - src/model/**
  onSuccessfulDeposit:
    handler: src/notifications/steps.onSuccessfulDeposit
    package:
      include:
        - src/notifications/**
        - src/common/**
        - src/model/**
  onFailedDeposit:
    handler: src/notifications/steps.onFailedDeposit
    package:
      include:
        - src/notifications/**
        - src/common/**
        - src/model/**
  onSuccessfulWithdrawal:
    handler: src/notifications/steps.onSuccessfulWithdrawal
    package:
      include:
        - src/notifications/**
        - src/common/**
        - src/model/**
  onFailedWithdrawal:
    handler: src/notifications/steps.onFailedWithdrawal
    package:
      include:
        - src/notifications/**
        - src/common/**
        - src/model/**
  #state machine steps
  sendNotification:
    handler: src/notifications/steps.sendNotification
    package:
      include:
        - src/notifications/**
        - src/common/**
  ethGetTransactionReceipt:
    handler: src/blockchain/ethereum-steps.getTransactionReceipt
    package:
      include:
        - src/blockchain/ethereum-steps.js
  ethSweepWallet:
    handler: src/blockchain/token-sweeper.sweep
    timeout: 30
    package:
      include:
        - src/blockchain/token-sweeper.js
        - lib/DalaWallet.json
  ethCreateWallet:
    handler: src/blockchain/dala-wallet.create
    timeout: 30
    package:
      include:
        - src/blockchain/dala-wallet.js
        - src/blockchain/utils.js
        - lib/DalaWallet.json
  walletProcessing:
    handler: src/wallets/steps.walletProcessing
    package:
      include:
        - src/wallets/**
        - src/common/**
  walletFailed:
    handler: src/wallets/steps.walletFailed
    package:
      include:
        - src/wallets/**
        - src/common/**
  walletCreated:
    handler: src/wallets/steps.walletCreated
    package:
      include:
        - src/wallets/**
        - src/common/**
  updateWalletAddress:
    handler: src/wallets/steps.updateWalletAddress
    package:
      include:
        - src/wallets/**
        - src/common/**
  subscribe:
    handler: src/subscribers/steps.subscribe
    package:
      include:
        - src/subscribers/**
        - src/common/**
  subscriberProcessing:
    handler: src/subscribers/steps.subscriberProcessing
    package:
      include:
        - src/subscribers/**
        - src/common/**
  subscriberAdded:
    handler: src/subscribers/steps.subscriberAdded
    package:
      include:
        - src/subscribers/**
        - src/common/**
  subscriberFailed:
    handler: src/subscribers/steps.subscriberFailed
    package:
      include:
        - src/subscribers/**
        - src/common/**
  transferProcessing:
    handler: src/transfers/steps.transferProcessing
    package:
      include:
        - src/transfers/**
        - src/common/**
  transferComplete:
    handler: src/transfers/steps.transferComplete
    package:
      include:
        - src/transfers/**
        - src/common/**
  transferFailed:
    handler: src/transfers/steps.transferFailed
    package:
      include:
        - src/transfers/**
        - src/common/**
  #api endpoints 
  authenticate:
    handler: src/users/handler.authenticate
    environment:
      CLIENT_ID: ${self:resources.Outputs.CognitoUserPoolDalaWalletUserPoolClientId.Value}
      USER_POOL_ID: ${self:resources.Outputs.CognitoUserPoolDalaWalletUserPoolId.Value}
    package: 
      include:
        - src/users/**
    events:
      - http:
          path: v1/authentications
          method: post
          cors: true
          private: true
  registerUser:
    handler: src/users/handler.register
    environment:
      CLIENT_ID: ${self:resources.Outputs.CognitoUserPoolDalaWalletUserPoolClientId.Value}
      USER_POOL_ID: ${self:resources.Outputs.CognitoUserPoolDalaWalletUserPoolId.Value}
    package:
      include:
        - src/users/**
    events:
      - http:
          path: v1/users
          method: post
          cors: true
          private: true
  createWallet:
    handler: src/wallets/handler.create
    package:
      include:
        - src/wallets/handler.js
        - src/common/**
    events:
      - http:
          path: v1/wallets
          method: post
          cors: true
          private: true
  createSubscriber:
    handler: src/subscribers/handler.create
    package:
      include: 
        - src/subscribers/handler.js
        - src/common/**
    events:
      - http:
          path: v1/subscribers
          method: post
          cors: true
          private: true

plugins:
  - serverless-secrets
  - serverless-prune-plugin
  - serverless-plugin-cfauthorizer

custom:
  prune:
    automatic: true
    number: 5
  cfAuthorizers:
    DalaWalletAuthorizer:
      Type: COGNITO_USER_POOLS
      Name: DalaUsers
      IdentitySource: "method.request.header.Authorization"
      ProviderARNs:
        - ${self:resources.Outputs.CognitoUserPoolDalaWalletUserPoolArn.Value}
  defaultStage: dev
  profiles:
    dev:
      DEFAULT_GAS: 4500000
      DESTINATION_ADDRESS: "0xDD86986bA67b4A1A8E7BE4833Dde2c09243333D7"
      TOKEN_ADDRESS: "0x5d689a3de1a648f85d23231a2d95fa89ce3d41fc"
      MIN_BALANCE: 50000000000000000000
  serverlessSecrets:
    providerOptions:
      region: ${self:provider.region}
    keys:
      default: ${self:resources.Outputs.DalaWalletKeyAliasName.Value}

resources:
  Outputs:
    DalaWalletDepositSNSTopicArn:
      Value:
        Ref: DalaWalletDepositSNSTopic
    DalaWalletStatusSNSTopicArn:
      Value:
        Ref: DalaWalletStatusSNSTopic
    DalaWalletTransferSNSTopicArn:
      Value:
        Ref: DalaWalletTransferSNSTopic
    DalaWalletWithdrawalSNSTopicArn:
      Value:
        Ref: DalaWalletWithdrawalSNSTopic
    DalaWalletStateMachineExecutionRoleArn:
      Value:
        Fn::GetAtt:
          - DalaWalletStateMachineExecutionRole
          - Arn
    DalaWalletEventsDynamoDbTableArn:
      Value:
        Fn::GetAtt:
          - DalaWalletEventsDynamoDbTable
          - Arn
    DalaWalletKeyAliasName:
      Value:
        Ref: DalaWalletKeyAlias
    DalaWalletSMSRoleArn:
      Value:
        Fn::GetAtt:
          - DalaWalletSMSRole
          - Arn
    CognitoUserPoolDalaWalletUserPoolId:
      Value:
        Ref: CognitoUserPoolDalaWalletUserPool
    CognitoUserPoolDalaWalletUserPoolProviderName:
      Value:
        Fn::GetAtt:
          - CognitoUserPoolDalaWalletUserPool
          - ProviderName
    CognitoUserPoolDalaWalletUserPoolProviderUrl:
      Value:
        Fn::GetAtt:
          - CognitoUserPoolDalaWalletUserPool
          - ProviderURL
    CognitoUserPoolDalaWalletUserPoolArn:
      Value:
        Fn::GetAtt:
          - CognitoUserPoolDalaWalletUserPool
          - Arn
    CognitoUserPoolDalaWalletUserPoolClientId:
      Value: 
        Ref: CognitoUserPoolDalaWalletUserPoolClient
    OnCreateSubscriberStateMachineArn:
      Value:
        Ref: OnCreateSubscriberStateMachine
    OnCreateWalletStateMachineArn:
      Value:
        Ref: OnCreateWalletStateMachine
    OnTokenTransferStateMachineArn:
      Value:
        Ref: OnTokenTransferStateMachine
    OnUserConfirmedStateMachineArn:
      Value:
        Ref: OnUserConfirmedStateMachine
  Resources:
    DalaWalletStateMachineExecutionRole: ${file(./CloudFormation/IAM/DalaWalletStateMachineExecutionRole.yml):Role}
    DalaTokenEventsDynamoDbTable: ${file(./CloudFormation/DynamoDB/DalaTokenEventsDynamoDbTable.yml):Table}
    DalaWalletEventsDynamoDbTable: ${file(./CloudFormation/DynamoDB/DalaWalletEventsDynamoDbTable.yml):Table}
    DalaWalletsDynamoDbTable: ${file(./CloudFormation/DynamoDB/DalaWalletsDynamoDbTable.yml):Table}
    DalaSubscribersDynamoDbTable: ${file(./CloudFormation/DynamoDB/DalaSubscribersDynamoDbTable.yml):Table}
    DalaWalletKeyKMS: ${file(./CloudFormation/KMS/DalaWalletKeyKMS.yml):Key}
    DalaWalletKeyAlias: ${file(./CloudFormation/KMS/DalaWalletKeyAlias.yml):Alias}
    DalaWalletSMSRole: ${file(./CloudFormation/IAM/DalaWalletSMSRole.yml):Role} 
    CognitoUserPoolDalaWalletUserPool: ${file(./CloudFormation/Cognito/CognitoUserPoolDalaWalletUserPool.yml):UserPool}
    CognitoUserPoolDalaWalletUserPoolClient: ${file(./CloudFormation/Cognito/CognitoUserPoolDalaWalletUserPoolClient.yml):UserPoolClient}
    DalaWalletStatusSNSTopic: ${file(./CloudFormation/SNS/DalaWalletStatusSNSTopic.yml):Topic}
    DalaWalletDepositSNSTopic: ${file(./CloudFormation/SNS/DalaWalletDepositSNSTopic.yml):Topic}
    DalaWalletWithdrawalSNSTopic: ${file(./CloudFormation/SNS/DalaWalletWithdrawalSNSTopic.yml):Topic}
    DalaWalletTransferSNSTopic: ${file(./CloudFormation/SNS/DalaWalletTransferSNSTopic.yml):Topic}
    OnCreateSubscriberStateMachine: ${file(./CloudFormation/StateMachines/OnCreateSubscriberStateMachine.yml):StateMachine}
    OnCreateWalletStateMachine: ${file(./CloudFormation/StateMachines/OnCreateWalletStateMachine.yml):StateMachine}  
    OnTokenTransferStateMachine: ${file(./CloudFormation/StateMachines/OnTokenTransferStateMachine.yml):StateMachine}  
    OnUserConfirmedStateMachine: ${file(./CloudFormation/StateMachines/OnUserConfirmedStateMachine.yml):StateMachine}
    #these functions have to depend on each other in a chain otherwise a cloudformation throttle exception is hit
    OnUserConfirmedLambdaFunction:
      Type: AWS::Lambda::Function
      DependsOn: OnDalaTokenEventLambdaFunction
    OnDalaTokenEventLambdaFunction:
      Type: AWS::Lambda::Function
      DependsOn: OnDalaWalletEventLambdaFunction
    OnDalaWalletEventLambdaFunction:
      Type: AWS::Lambda::Function
      DependsOn: OnSuccessfulCreateWalletLambdaFunction
    OnSuccessfulCreateWalletLambdaFunction:
      Type: AWS::Lambda::Function
      DependsOn: OnFailedCreateWalletLambdaFunction
    OnFailedCreateWalletLambdaFunction:
      Type: AWS::Lambda::Function
      DependsOn: OnSuccessfulTransferLambdaFunction
    OnSuccessfulTransferLambdaFunction:
      Type: AWS::Lambda::Function
      DependsOn: OnFailedTransferLambdaFunction
    OnFailedTransferLambdaFunction:
      Type: AWS::Lambda::Function
      DependsOn: OnSuccessfulDepositLambdaFunction
    OnSuccessfulDepositLambdaFunction:
      Type: AWS::Lambda::Function
      DependsOn: OnFailedDepositLambdaFunction
    OnFailedDepositLambdaFunction:
      Type: AWS::Lambda::Function
      DependsOn: OnSuccessfulWithdrawalLambdaFunction
    OnSuccessfulWithdrawalLambdaFunction:
      Type: AWS::Lambda::Function
      DependsOn: OnFailedWithdrawalLambdaFunction
    OnFailedWithdrawalLambdaFunction:
      Type: AWS::Lambda::Function
      DependsOn: SendNotificationLambdaFunction
    SendNotificationLambdaFunction:
      Type: AWS::Lambda::Function
      DependsOn: EthGetTransactionReceiptLambdaFunction
    EthGetTransactionReceiptLambdaFunction:
      Type: AWS::Lambda::Function
      DependsOn: EthSweepWalletLambdaFunction
    EthSweepWalletLambdaFunction:
      Type: AWS::Lambda::Function
      DependsOn: EthCreateWalletLambdaFunction
    EthCreateWalletLambdaFunction:
      Type: AWS::Lambda::Function
      DependsOn: WalletProcessingLambdaFunction
    WalletProcessingLambdaFunction:
      Type: AWS::Lambda::Function
      DependsOn: WalletFailedLambdaFunction
    WalletFailedLambdaFunction:
      Type: AWS::Lambda::Function
      DependsOn: WalletCreatedLambdaFunction
    WalletCreatedLambdaFunction:
      Type: AWS::Lambda::Function
      DependsOn: UpdateWalletAddressLambdaFunction
    UpdateWalletAddressLambdaFunction:
      Type: AWS::Lambda::Function
      DependsOn: SubscribeLambdaFunction
    SubscribeLambdaFunction:
      Type: AWS::Lambda::Function
      DependsOn: SubscriberProcessingLambdaFunction
    SubscriberProcessingLambdaFunction:
      Type: AWS::Lambda::Function
      DependsOn: SubscriberAddedLambdaFunction
    SubscriberAddedLambdaFunction:
      Type: AWS::Lambda::Function
      DependsOn: SubscriberFailedLambdaFunction
    SubscriberFailedLambdaFunction:
      Type: AWS::Lambda::Function
      DependsOn: TransferProcessingLambdaFunction
    TransferProcessingLambdaFunction:
      Type: AWS::Lambda::Function
      DependsOn: TransferCompleteLambdaFunction
    TransferCompleteLambdaFunction:
      Type: AWS::Lambda::Function
      DependsOn: TransferFailedLambdaFunction
    TransferFailedLambdaFunction:
      Type: AWS::Lambda::Function
      DependsOn: AuthenticateLambdaFunction
    AuthenticateLambdaFunction:
      Type: AWS::Lambda::Function
      DependsOn: RegisterUserLambdaFunction
    RegisterUserLambdaFunction:
      Type: AWS::Lambda::Function
      DependsOn: CreateWalletLambdaFunction
    CreateWalletLambdaFunction:
      Type: AWS::Lambda::Function
      DependsOn: CreateSubscriberLambdaFunction
    CreateSubscriberLambdaFunction:
      Type: AWS::Lambda::Function